openapi: 3.0.0
info:
  version: 1.0.0
  title: Netatmo
  description: "Netamo swagger interface"
  termsOfService: "https://dev.netatmo.com/dev/resources/legal/introduction"
  license:
    name: "Netatmo : Terms of Service"
    url: "https://dev.netatmo.com/dev/resources/legal/introduction"
  contact:
    name: Netatmo
    email: contact-api@netatmo.com
externalDocs:
  description: Netatmo reference API documentation
  url: "https://dev.netatmo.com/dev/resources/technical/reference"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/chelmi.info/Netatmo-energy/1.0.0
  - url: https://api.netatmo.com/api    # The "url: " prefix is required https://api.netatmo.com/api/homesdata?home_id=
tags:
  - name: weather
    description: Weather station methods
  - name: aircare
    description: Air care methods
  - name: energy
    description: Energy methods
  - name: security
    description: Security methods
paths:
  /homesdata:
    get:
      tags:
        - energy
      description: The homesdata method returns the topology and static information of all devices present in a user account. It is possible to specify a home_id to focus on one home.
      operationId: homesdata
      parameters:
        - name: home_id
          required: false
          in: query
          description: Id of the home you want to retrieve information 
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
        - name: gateway_types
          required: false
          in: query
          description: Filter by Gateway Type
          content:
            text/plain:
                schema:
                  type: string
                  example: "NAPlug"
                  enum:
                    - NAPlug
                    - NATherm1
                    - NRV
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAHomesDataResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - read_thermostat
        - password_oauth:
          - read_thermostat
  /homestatus:
    get:
      tags:
        - energy
      description: The homestatus method returns the current status of all devices present in a specific home.
      operationId: homestatus
      parameters:
        - name: home_id
          required: true
          in: query
          description: Id of the home you want to retrieve information from
          content:
            text/plain:
                schema:
                  type: array
                  example: "5954e7f249c75f97428b7b23"
        - name: device_types
          in: query
          description: Filter by Device Type
          content:
            text/plain:
                schema:
                  type: array
                  example: ""
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAHomeStatusResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - read_thermostat
        - password_oauth:
          - read_thermostat
  /getroommeasure:
    get:
      tags:
        - energy
      description: The getroommeasure method returns the history of data associated to a room.
      operationId: getroommeasure
      parameters:
        - name: home_id
          required: true
          in: query
          description: Id of the home you want to retrieve information from
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
        - name: room_id
          required: true
          in: query
          description: Id of the home you want to retrieve information from
          content:
            text/plain:
                schema:
                  type: string
                  example: "XXXXXXXXX"
        - name: scale
          required: true
          in: query
          description: Time scale to use (time betwee 2 measures)
          content:
            text/plain:
                schema:
                  type: string
                  example: "30min"
                  enum:
                    - 30min
                    - 1hour
                    - 3hours
                    - 1day
                    - 1week
                    - 1month
        - name: type
          required: true
          in: query
          description: Type of data to be returned. 
          content:
            text/plain:
                schema:
                  type: string
                  example: "temperature"
        - name: date_begin
          required: false
          in: query
          description: Epoch timestamp of the first measure to retrieve. Default is null.
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "1612294057"
        - name: date_end
          required: false
          in: query
          description: Epoch timestamp of the last measure to retrieve.
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "1612301279"
        - name: limit
          required: false
          in: query
          description: Maximum number of measures (default and max Are 1024).
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: ""
        - name: optimize
          required: false
          in: query
          description: Determines the format of the answer. Default is true.
          content:
            text/plain:
                schema:
                  type: boolean
                  example: "false"
        - name: real_time
          required: false
          in: query
          description: If scale different than max, timestamps are by default offset + scale/2. To get exact timestamps, use true. 
          content:
            text/plain:
                schema:
                  type: boolean
                  example: "false"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NARoomMeasureResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - read_thermostat
        - password_oauth:
          - read_thermostat
  /setroomthermpoint:
    post:
      tags:
        - energy
      description: The setroomthermpoint method controls the heating of a specific room. "manual" sets the desired temperature until endtime, "max" sets the desired temperature to 30Â° for a given duration, "home" switches back to the scheduled defined for the home.
      operationId: setroomthermpoint
      parameters:
        - name: home_id
          required: true
          in: query
          description: Id of the home you want to set
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
        - name: room_id
          required: true
          in: query
          description: Id of the room you want to set
          content:
            text/plain:
                schema:
                  type: string
                  example: "XXXXXXXXX"
        - name: mode
          required: true
          in: query
          description: The mode you are applying to the room
          content:
            text/plain:
                schema:
                  type: string
                  example: "manual"
                  enum:
                    - manual
                    - max
                    - hg
                    - home
        - name: temp
          required: false
          in: query
          description: The manual temperature to apply
          content:
            text/plain:
                schema:
                  type: number
                  example: "20.0"
        - name: endtime
          required: false
          in: query
          description: The end time of the mode set.
          content:
            text/plain:
                schema:
                  type: string
                  example: "1612384219"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAOKResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - write_thermostat
        - password_oauth:
          - write_thermostat
  /setthermmode:
    post:
      tags:
        - energy
      description: The setthermmode method controls the heating of a specific home. "schedule" mode in which the home will follow the user schedule, "away" mode which will put the whole house to away (default is 12Â° but can be changed by the user in its settings), "hg" corresponds to frostguard mode (7Â° by default).
      operationId: setthermmode
      parameters:
        - name: home_id
          required: true
          in: query
          description: Id of the home you want to set
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
        - name: mode
          required: true
          in: query
          description: Set the home heating mode to schedule, away or frost guard mode
          content:
            text/plain:
                schema:
                  type: string
                  example: "schedule"
                  enum:
                    - schedule
                    - away
                    - hg
        - name: endtime
          required: false
          in: query
          description: The end time of the mode set.
          content:
            text/plain:
                schema:
                  type: string
                  example: "1612384219"
        - name: schedule_id
          required: false
          in: query
          description: switch the schedule. This parameter would be used only in "schedule" mode.
          content:
            text/plain:
                schema:
                  type: string
                  example: "XXXXXXXX"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAOKResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - write_thermostat
        - password_oauth:
            - write_thermostat
  /getmeasure:
    get:
      tags:
        - energy
        - weather
      description: Returns data of a device, module or boiler.
      operationId: getmeasure
      parameters:
        - name: device_id
          required: true
          in: query
          description: Weather station / boiler mac address
          content:
            text/plain:
                schema:
                  type: string
                  example: "70:ee:50:XX:XX:XX"
        - name: module_id
          required: false
          in: query
          description: Returns the measures of the device when no module_id is specified or the measure of the specified module when module_id is set.
          content:
            text/plain:
                schema:
                  type: string
        - name: scale
          required: true
          in: query
          description:  |
            Time interval between 2 measures.
            Possible values :
            max: every stored value is be returned
            30min: 1 value every 30 minutes
            1hour: 1 value every hour
            3hours: 1 value every 3 hours
            1day: 1 value per day
            1week: 1 value per week
            1month: 1 value per month
          content:
            text/plain:
                schema:
                  type: string
                  example: "30min"
                  enum:
                    - max
                    - 30min
                    - 1hour
                    - 3hours
                    - 1day
                    - 1week
                    - 1month
        - name: type
          required: true
          in: query
          description: |
            Measures you are interested in. Data you can request depends on the scale.

            **For Weather Stations:**
              * max : Temperature (Â°C), CO2 (ppm), Humidity (%), Pressure (mbar), Noise (db), Rain (mm), WindStrength (km/h), WindAngle (angles), Guststrength (km/h), GustAngle (angles)
              * 30min, 1hour, 3hours: Same as above + min_temp, max_temp, min_hum, max_hum, min_pressure, max_pressure, min_noise, max_noise, sum_rain, date_max_gust
              * 1day, 1week, 1month: Same as above + date_min_temp, date_max_temp, date_min_hum, date_max_hum, date_min_pressure, date_max_pressure, date_min_noise, date_max_noise, date_min_co2, date_max_co2
            
            **For Boilers:**
              * max: temperature (Â°C), sp_temperature (Â°C), boileron (sec), boileroff (sec)
              * 30min, 1hour, 3hours: temperature, sp_temperature, min_temp, max_temp, sum_boiler_on, sum_boiler_off
              * 1day, 1week, 1month: temperature, min_temp, date_min_temp, max_temp, sum_boiler_on, sum_boiler_off
          content:
            text/plain:
                schema:
                  type: array
                  example: "Temperature"
                  enum:
                    - Temperature
                    - CO2
                    - Humidity
                    - Pressure
                    - Noise
                    - Rain
                    - WindStrength
                    - WindAngle
                    - Guststrength
                    - GustAngle
                    - Sp_Temperature
                    - BoilerOn
                    - BoilerOff
                    - min_temp
                    - date_min_temp
                    - max_temp
                    - date_max_temp
                    - min_hum
                    - date_min_hum
                    - max_hum
                    - date_max_hum
                    - min_pressure
                    - date_min_pressure
                    - max_pressure
                    - date_max_pressure
                    - min_noise
                    - date_min_noise
                    - max_noise
                    - date_max_noise
                    - date_min_co2
                    - date_max_co2
                    - date_max_gust
                    - sum_rain
                    - sum_boiler_on
                    - sum_boiler_off
        - name: date_begin
          required: false
          in: query
          description: Epoch timestamp of the first measure to retrieve. Default is null.
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "1612294057"
        - name: date_end
          required: false
          in: query
          description: Epoch timestamp of the last measure to retrieve.
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "1612301279"
        - name: limit
          required: false
          in: query
          description: Maximum number of measurements (default and max Are 1024).
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "20"
        - name: optimize
          required: false
          in: query
          description: |
            Allows you to choose the format of the answer.
            If you build a mobile app and bandwith usage is an issue, use `optimize = true`.
            Use `optimize = false` for easier parsing. In this case, values are indexed by sorted timestamp.
            Example of un-optimized response :
            ```json
            {"status": "ok", 
              "body": {
                "1347575400": [18.3,39],
                "1347586200": [20.6,48]
              },
            "time_exec": 0.012136936187744}
            ```
            If optimize is set to true, measures are returned as an array of series of regularly spaced measurements. Each series is defined by a beginning time beg_time and a step between measurements, step_time:
            ```json
            {"status": "ok",
              "body": [
                {"beg_time": 1347575400,
                 "step_time": 10800,
                 "value": 
                    [[18.3,39],
                    [ 20.6,48]]
                }],
            "time_exec": 0.014238119125366}
            ```
            Default value is `true`.
          content:
            text/plain:
                schema:
                  type: boolean
                  example: "false"
        - name: real_time
          required: false
          in: query
          description: |
            In scales higher than max, since the data is aggregated, the timestamps returned are by default offset by +(scale/2).
            For instance, if you ask for measures at a daily scale, you will receive data timestamped at 12:00 if real_time is set to `false` (default case), and timestamped at 00:00 if real_time is set to `true`.
            NB : The servers always store data with real_time set to `true` and data are offset by this parameter AFTER having being time-filtered, you could therefore have data after date_end if real_time is set to `false`.
          content:
            text/plain:
                schema:
                  type: boolean
                  example: "false"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAMeasureResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
        "404":
          description: Not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NA404"
      security:
        - OAuth2:
            - read_thermostat
            - read_station
        - password_oauth:
            - read_thermostat
            - read_station
  /synchhomeschedule:
    post:
      tags:
        - energy
      description: The synchhomeschedule method allows to edit a thermostat schedule of a home. To edit a particular schedule, you need to enter the schedule_id, if you don"t specify one, the modification will be applied to the current schedule.
      operationId: synchhomeschedule
      parameters:
        - name: home_id
          required: true
          in: query
          description: Id of the home you want to edit information of
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
        - name: schedule_id
          required: false
          in: query
          description: ID of the schedule to modify
          content:
            text/plain:
                schema:
                  type: string
                  example: "my_schedule"
        - name: zones
          required: true
          in: query
          description: Array of data used to define time periods to build a schedule. More info on the Thermostat page. id of zone | type of zone | Name of zone | Temperature
          content:
            text/plain:
                schema:
                  type: array
                  example: "schedule"
        - name: timetable
          required: false
          in: query
          description: Array describing the timetable. More info on the Thermostat page. ID of the zone - offset in minutes since Monday 00:00:01
          content:
            text/plain:
                schema:
                  type: array
                  example: "3600"
        - name: hg_temp
          required: true
          in: query
          description: Frost guard temperature value
          content:
            text/plain:
                schema:
                  type: number
                  example: "07.00"
        - name: away_temp
          required: true
          in: query
          description: Away temperature value
          content:
            text/plain:
                schema:
                  type: number
                  example: "12.00"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAOKResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - write_thermostat
        - password_oauth:
            - write_thermostat
  /switchhomeschedule:
    post:
      tags:
        - energy
      description: The switchhomeschedule method applies a specific schedule to a home.
      operationId: switchhomeschedule
      parameters:
        - name: schedule_id
          required: false
          in: query
          description: Id of the schedule to switch on
          content:
            text/plain:
                schema:
                  type: string
                  example: "XXXXXXXX"
        - name: home_id
          required: true
          in: query
          description: Id of the home you want to switch the schedule on
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAOKResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
        "404":
          description: Not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NA404"
      security:
        - OAuth2:
            - write_thermostat
        - password_oauth:
            - write_thermostat
  /getpublicdata:
    get:
      tags:
        - weather
      description: Retrieves publicly shared weather data from Outdoor Modules within a predefined area.
      operationId: getpublicdata
      parameters:
        - name: lat_ne
          in: query
          description: Latitude of the north east corner of the requested area. -85 <= lat_ne <= 85 and lat_ne>lat_sw
          required: true
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "80"
        - name: lon_ne
          in: query
          description: Longitude of the north east corner of the requested area. -180 <= lon_ne <= 180 and lon_ne>lon_sw
          required: true
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "170"
        - name: lat_sw
          in: query
          description: Latitude of the south west corner of the requested area. -85 <= lat_sw <= 85
          required: true
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "80"
        - name: lon_sw
          in: query
          description: Longitude of the south west corner of the requested area. -180 <= lon_sw <= 180
          required: true
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "170"
        - name: required_data
          in: query
          description: To filter stations based on type of measures (e.g. rain will only return stations with rain gauges). Default is no filter. You can find all available measures types on the Thermostat page.
          content:
            text/plain:
                schema:
                  type: array
                  example: "temperature"
                  enum:
                    - temperature
                    - humidity
                    - pressure
                    - wind
                    - rain
        - name: filter
          required: false
          in: query
          description: If scale different than max, timestamps are by default offset + scale/2. To get exact timestamps, use true. 
          content:
            text/plain:
                schema:
                  type: boolean
                  example: "false"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAPublicDataResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
  /getstationsdata:
   get:
      tags:
        - weather
      description: Retrieves data from a user weather station.
      operationId: getstationsdata
      parameters:
        - name: device_id
          required: false
          in: query
          description: Mac adress of the station to get the measure from
          content:
            text/plain:
                schema:
                  type: string
                  example: "70:ee:50:XX:XX:XX"
        - name: get_favorites
          required: false
          in: query
          description: Retrieve user's favorite weather stations. Default is false.
          content:
            text/plain:
                schema:
                  type: boolean
                  example: "false"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAStationsDataResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - read_station
        - password_oauth:
            - read_station
  /gethomecoachsdata:
    get:
      tags:
        - aircare
      description: Retrieves data from a Smart Indoor Air Quality Monitor.
      operationId: gethomecoachsdata
      parameters:
        - name: device_id
          required: true
          in: query
          description: Smart Indoor monitor mac address
          content:
            text/plain:
                schema:
                  type: string
                  example: "70:ee:50:XX:XX:XX"
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAHealthyHomeCoachDataResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - read_homecoach
        - password_oauth:
            - read_homecoach
  /gethomedata:
    get:
      tags:
        - security
      description: Retrieves security data from a home.
      operationId: gethomedata
      parameters:
        - name: home_id
          required: false
          in: query
          description: Id of the home you want to retrieve information from
          content:
            text/plain:
                schema:
                  type: string
                  example: "5954e7f249c75f97428b7b23"
        - name: size
          required: false
          in: query
          description: Number of events to retrieve. Default is `30`.
          content:
            text/plain:
                schema:
                  type: integer
                  format: int32
                  example: "20"         
      responses:
        "200":
          description: Success
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NASecurityDataResponse"
        "400":
          description: Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/NAError"
      security:
        - OAuth2:
            - read_homecoach
            - read_camera
            - acces_camera 
            - read_presence 
            - access_presence
            - read_smokedetector
        - password_oauth:
            - read_homecoach
            - read_camera
            - acces_camera 
            - read_presence 
            - access_presence
            - read_smokedetector
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://api.netatmo.net/oauth2/authorize"
          tokenUrl: "https://api.netatmo.net/oauth2/token"
          scopes:
            read_station: to retrieve weather station data (Getstationsdata, Getmeasure). If no scope is provided during the token request, the default is "read_station"
            read_thermostat: to retrieve thermostat data ( Homestatus, Getroommeasure...
            write_thermostat: to set up the thermostat (Synchomeschedule, Setroomthermpoint...)
            read_camera: to retrieve Smart Indoor Cameradata (Gethomedata, Getcamerapicture...)
            write_camera: to inform the Smart Indoor Camera that a specific person or everybody has left the Home (Setpersonsaway, Setpersonshome)
            access_camera: to access the camera, the videos and the live stream *
            read_presence: to retrieve Smart Outdoor Camera data (Gethomedata, Getcamerapicture...)
            access_presence: to access the camera, the videos and the live stream *
            read_smokedetector : to retrieve the Smart Smoke Alarm informations and events (Gethomedata, Geteventsuntil...)
            read_homecoach: to read data coming from Smart Indoor Air Quality Monitor (gethomecoachsdata)
    password_oauth:
      type: oauth2
      flows:
        password:
          tokenUrl: "https://api.netatmo.net/oauth2/token"
          scopes:
            read_station: to retrieve weather station data (Getstationsdata, Getmeasure). If no scope is provided during the token request, the default is "read_station"
            read_thermostat: to retrieve thermostat data ( Homestatus, Getroommeasure...
            write_thermostat: to set up the thermostat (Synchomeschedule, Setroomthermpoint...)
            read_camera: to retrieve Smart Indoor Cameradata (Gethomedata, Getcamerapicture...)
            write_camera: to inform the Smart Indoor Camera that a specific person or everybody has left the Home (Setpersonsaway, Setpersonshome)
            access_camera: to access the camera, the videos and the live stream *
            read_presence: to retrieve Smart Outdoor Camera data (Gethomedata, Getcamerapicture...)
            access_presence: to access the camera, the videos and the live stream *
            read_smokedetector : to retrieve the Smart Smoke Alarm informations and events (Gethomedata, Geteventsuntil...)
            read_homecoach: to read data coming from Smart Indoor Air Quality Monitor (gethomecoachsdata)
  schemas:
    NAError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: number
            message:
              type: string
    NA404:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: number
            message:
              type: string
    NAOKResponse:
      type: object
      properties:
        status:
          type: string
        time_exec:
          type: integer
          format: int32
        time_server:
          type: integer
          format: int32
    NAStationsDataResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        body:
          $ref: '#/components/schemas/NAStationDataBody'
        time_exec:
          type: integer
          format: int32
        time_server:
          type: integer
          format: int32
    NAStationDataBody:
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/NAMain'
        user:
          $ref: '#/components/schemas/NAUser'
    NAMain:
      type: object
      properties:
        _id:
          type: string
        cipher_id:
          type: string
        last_status_store:
          type: integer
          format: int32
        modules:
          type: array
          items:
            $ref: '#/components/schemas/NAStationModule'
        place:
          $ref: '#/components/schemas/NAPlace'
        station_name:
          type: string
        type:
          type: string
          description: |
            Defines the type of the device/module. Possible values:
            NAMain : base station
            NAModule1 : outdoor module
            NAModule2 : wind module
            NAModule3 : rain gauge module
            NAModule4 : additionnal indoor module
            NAPlug : thermostat relay/plug and smart valves
            NATherm1 : thermostat module
        dashboard_data:
          $ref: '#/components/schemas/NADashboardData'
        data_type:
          type: array
          items:
            type: string
        co2_calibrating:
          type: boolean
        date_setup:
          type: integer
          format: int32
        last_setup:
          type: integer
          format: int32
        module_name:
          type: string
        firmware:
          type: integer
          format: int32
        last_upgrade:
          type: integer
          format: int32
        wifi_status:
          type: integer
          format: int32
          description: |
            Current wifi status. The different thresholds to take into account are
            RSSI_THRESHOLD_0 = 86 bad signal
            RSSI_THRESHOLD_1 = 71 average signal
            RSSI_THRESHOLD_2 = 56 good signal
        reachable:
          type: boolean
          description: true when the station was seen by the Netatmo cloud within the last 4 hours
        read_only:
          type: boolean
          description: true when the user was invited to (or has favorited) a station, false when the user owns it
        favorite:
          type: boolean
          description: true when the device is a user favorite and not owned by them
    NAStationModule:
      properties:
        _id:
          type: string
        type:
          type: string
          description: |
            Defines the type of the device/module. Possible values:
            NAMain : base station
            NAModule1 : outdoor module
            NAModule2 : wind module
            NAModule3 : rain gauge module
            NAModule4 : additionnal indoor module
            NAPlug : thermostat relay/plug and smart valves
            NATherm1 : thermostat module
        last_message:
          type: integer
          format: int32
        last_seen:
          type: integer
          format: int32
        reachable:
          type: boolean
          description: true when the station was seen by the Netatmo cloud within the last 4 hours
        dashboard_data:
          $ref: '#/components/schemas/NADashboardData'
        data_type:
          type: array
          items:
            type: string
        module_name:
          type: string
        last_setup:
          type: integer
          format: int32
        battery_vp:
          type: integer
          format: int32
          description: |
            Current battery status. The threshold depends on the kind of module. The list below shows the different thresholds depending on the module type.
            "Indoor module Battery range: 6000 ... 4200" |
            INDOOR_BATTERY_LEVEL_FULL = 5640
            INDOOR_BATTERY_LEVEL_HIGH = 5280
            INDOOR_BATTERY_LEVEL_MEDIUM = 4920
            INDOOR_BATTERY_LEVEL_LOW = 4560
            "Below 4560: very low" |
                
            "Raingauge and outdoor module Battery range: 6000 ... 3600" |
            BATTERY_LEVEL_FULL = 5500
            BATTERY_LEVEL_HIGH = 5000
            BATTERY_LEVEL_MEDIUM = 4500
            BATTERY_LEVEL_LOW = 4000
            "Below 4000: very low" |

            "Smart anemometer Battery range: 6000 ... 4360" |
            ANEMOMETER_BATTERY_LEVEL_FULL = 5590
            ANEMOMETER_BATTERY_LEVEL_HIGH = 5180
            ANEMOMETER_BATTERY_LEVEL_MEDIUM = 4770
            ANEMOMETER_BATTERY_LEVEL_LOW = 4360
            "Below 4000: 4360 low" |
                
            "Thermostat Battery range: 4500 ... 3000" |
            THERMOSTAT_BATTERY_LEVEL_FULL = 4100
            THERMOSTAT_BATTERY_LEVEL_HIGH = 3600
            THERMOSTAT_BATTERY_LEVEL_MEDIUM = 3300
            THERMOSTAT_BATTERY_LEVEL_LOW = 3000
            "Below 3000: very low"
        battery_percent:
          type: integer
          format: int32
          description: Current battery level in percentage.
        rf_status:
          type: integer
          format: int32
          description: |
            "Current radio status. The different thresholds to take into account are :" |
            RADIO_THRESHOLD_SIGNAL_LOW = 90 
            RADIO_THRESHOLD_SIGNAL_MEDIUM = 80
            RADIO_THRESHOLD_SIGNAL_HIGH = 70
            RADIO_THRESHOLD_SIGNAL_FULL = 60
        firmware:
          type: integer
          format: int32
    NAPlace:
      properties:
        city:
          type: string
        altitude:
          type: number
          format: float
        country:
          type: string
        from_ip:
          type: boolean
        improveLocProposed:
          type: boolean
        location:
          type: array
          items:
            type: number
            format: double
        timezone:
          type: string
        trust_location:
          type: boolean
    NADashboardData:
      properties:
        time_utc:
          type: integer
          format: int32
        device_id:
          type: number
          format: float
        BoilerOn:
          type: integer
          format: int32
        BoilerOff:
          type: integer
          format: int32
        Temperature:
          type: number
          format: float
          description: Last temperature measure @ time_utc (in Â°C)
        temp_trend:
          type: string
          description: Temperature evolution trend
        date_max_temp:
          type: integer
          format: int32
          description: Timestamp when max temperature was measured
        date_min_temp:
          type: integer
          format: int32
          description: Timestamp when min temperature was measured
        min_temp:
          type: number
          format: float
          description: Max temperature of the day (measured @ date_max_temp)
        max_temp:
          type: number
          format: float
          description: Min temperature of the day (measured @ date_min_temp)
        AbsolutePressure:
          type: number
          format: float
          description: Real measured pressure @ time_utc (in mb)
        CO2:
          type: number
          format: float
          description: Last Co2 measured @ time_utc (in ppm)
        Humidity:
          type: number
          format: float
          description: Last humidity measured @ time_utc (in %)
        Noise:
          type: number
          format: float
          description: Last noise measured @ time_utc (in db)
        Pressure:
          type: number
          format: float
          description: Last Sea level pressure measured @ time_utc (in mb)
        pressure_trend:
          type: string
          description: Pressure evolution trend
        Rain:
          type: number
          format: float
          description: Last rain measured (in mm)
        sum_rain_1:
          type: number
          format: float
          description: Amount of rain in last hour
        sum_rain_24:
          type: number
          format: float
          description: Amount of rain today
        WindAngle:
          type: integer
          format: int32
          description: Current 5 min average wind direction measured @ time_utc (in Â°)
        GustAngle:
          type: integer
          format: int32
          description: Direction of the last 5 min highest gust wind
        WindStrength:
          type: integer
          format: int32
          description: Current 5 min average wind speed measured @ time_utc (in km/h)
        max_wind_str:
          type: integer
          format: int32
        date_max_wind_str:
          type: integer
          format: int32
          description: Timestamp when max wind strength was measured
        GustStrength:
          type: integer
          format: int32
          description: Speed of the last 5 min highest gust wind
        health_idx:
          type: integer
          format: int32
          description: 'Current health index: 0 = Healthy, 1 = Fine, 2 = Fair, 3 = Poor, 4 = Unhealthy'
    NAUser:
      properties:
        _id:
          type: string
        administrative:
          $ref: '#/components/schemas/NAUserAdministrative'
        date_creation:
          $ref: '#/components/schemas/NADate'
        devices:
          type: array
          description: An array of string containing the ids of the devices owned by the user
          items:
            type: string
        friend_devices:
          type: array
          description: |
            An array of string containing the ids of the devices on which the user has a "guest" access
          items:
            type: string
        mail:
          type: string
        timeline_not_read:
          type: integer
          format: int32
        timeline_size:
          type: integer
          format: int32
    NAUserAdministrative:
      properties:
        country:
          type: string
          description: user country
        lang:
          type: string
          description: user locale
        reg_locale:
          type: string
          description: user regional preferences (used for displaying date)
        unit:
          type: string
          description: '0: metric system, 1: imperial system'
        windunit:
          type: string
          description: '0: kph, 1: mph, 2: ms, 3: beaufort, 4: knot'
        pressureunit:
          type: string
          description: '0: mbar, 1: inHg, 2: mmHg'
        feel_like_algo:
          type: string
          description: 'algorithm used to compute feel like temperature, 0: humidex, 1: heat-index'
    NADate:
      properties:
        sec:
          type: integer
          format: int32
        usec:
          type: integer
          format: int32
    NAHomesDataResponse:
      type: object
      properties:
        body:
          type: object
          properties:
            homes:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  altitude:
                    type: number
                  coordinates:
                    type: array
                    items:
                      type: number
                  country:
                    type: string
                  timezone:
                    type: string
                  rooms:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        type:
                          type: string
                        module_ids:
                          type: array
                          items:
                            type: string
                  modules:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        type:
                          type: string
                        name:
                          type: string
                        setup_date:
                          type: number
                        modules_bridged:
                          type: array
                          items:
                            type: string
                  therm_schedules:
                    type: array
                    items:
                      type: object
                      properties:
                        timetable:
                          type: array
                          items:
                            type: object
                            properties:
                              zone_id:
                                type: number
                              m_offset:
                                type: number
                        zones:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: number
                              name:
                                type: string
                              rooms_temp:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    temp:
                                      type: number
                                    room_id:
                                      type: string
                              id:
                                type: number
                        name:
                          type: string
                        away_temp:
                          type: number
                        hg_temp:
                          type: number
                        id:
                          type: string
                        type:
                          type: string
                  therm_mode:
                    type: string
                  therm_setpoint_default_duration:
                    type: number
                  schedules:
                    type: array
                    items:
                      type: object
                      properties:
                        timetable:
                          type: array
                          items:
                            type: object
                            properties:
                              zone_id:
                                type: number
                              m_offset:
                                type: number
                        zones:
                          type: array
                          items:
                            type: object
                            properties:
                              type:
                                type: number
                              name:
                                type: string
                              rooms_temp:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    temp:
                                      type: number
                                    room_id:
                                      type: string
                              id:
                                type: number
                              rooms:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                    therm_setpoint_temperature:
                                      type: number
                        name:
                          type: string
                        away_temp:
                          type: number
                        hg_temp:
                          type: number
                        id:
                          type: string
                        type:
                          type: string
            user:
              type: object
              properties:
                email:
                  type: string
                language:
                  type: string
                locale:
                  type: string
                feel_like_algorithm:
                  type: number
                unit_system:
                  type: number
                unit_wind:
                  type: number
                id:
                  type: string
        status:
          type: string
        time_exec:
          type: number
        time_server:
          type: number
    NAHomeStatusResponse:
      type: object
      properties:
        status:
          type: string
        time_server:
          type: number
        body:
          type: object
          properties:
            home:
              type: object
              properties:
                id:
                  type: string
                modules:
                  type: array
                  items:
                    type: object
                    properties:
                      boiler_cable:
                        type: boolean
                      firmware_revision:
                        type: number
                      hardware_version:
                        type: number
                      id:
                        type: string
                      rf_strength:
                        type: number
                      type:
                        type: string
                      wifi_strength:
                        type: number
                rooms:
                  type: array
                  items:
                    type: object
                    properties:
                      anticipating:
                        type: boolean
                      heating_power_request:
                        type: number
                      id:
                        type: string
                      open_window:
                        type: boolean
                      reachable:
                        type: boolean
                      therm_measured_temperature:
                        type: number
                      therm_setpoint_mode:
                        type: string
                      therm_setpoint_start_time:
                        type: number
                      therm_setpoint_temperature:
                        type: number
    NARoomMeasureResponse:
      type: object
      properties:
        body:
          type: object
          properties:
            timestamp:
              type: array
              items:
                type: number
        status:
          type: string
        time_exec:
          type: number
        time_server:
          type: number
    NAMeasureResponse:
      type: object
      properties:
        body:
          type: array
          items:
            $ref: '#/components/schemas/NAMeasureBodyElement'
        status:
          type: string
          example: ok
        time_exec:
          type: number
          format: double
        time_server:
          type: integer
          format: int32
    NAMeasureBodyElement:
      type: object
      properties:
        beg_time:
          type: integer
          format: int32
        step_time:
          type: integer
          format: int32
        value:
          type: array
          items:
            type: array
            items:
              type: number
              format: float
    NAPublicDataResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
        body:
          type: array
          items:
            $ref: "#/components/schemas/NAPublicData"
        time_exec:
          type: number
        time_server:
          type: number
    NAPublicData:
      type: object
      properties:
        _id:
          type: string
          description: id of the station
          example: "70:ee:50:xx:xx:xx"
        place:
          type: array
          items:
            $ref: "#/components/schemas/NAPlace"
        mark:
          type: integer
        modules:
          type: array
          items:
            type: string
        module_types:
          type: object
          description: Latest measures. of the station, organized by module
          additionalProperties:
            type: string
        measures:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/NAMeasure"
    NAMeasure:
      type: object
      properties:
        res:
          additionalProperties:
            type: array
            items:
              type: number
              format: double
        type:
          type: array
          items:
            type: string
        rain_60min:
          type: number
        rain_24h:
          type: number
        rain_live:
          type: number
        rain_utc:
          type: integer
          format: int64
        wind_strength:
          type: number
        wind_angle:
          type: number
        gust_strength:
          type: number
        gust_angle:
          type: number
        wind_timeutc":
          type: integer
          format: int64
    NAHealthyHomeCoachDataResponse:
      properties:
        status:
          type: string
          example: ok
        body:
          $ref: '#/components/schemas/NAHealthyHomeCoachDataBody'
        time_exec:
          type: number
          format: double
        time_server:
          type: integer
          format: int32
    NAHealthyHomeCoachDataBody:
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/NAHealthyHomeCoach'
        user:
          $ref: '#/components/schemas/NAUser'
    NAHealthyHomeCoach:
      properties:
        _id:
          type: string
        cipher_id:
          type: string
        last_status_store:
          type: integer
          format: int32
        place:
          $ref: '#/components/schemas/NAPlace'
        type:
          type: string
          description: |
            Defines the type of the device/module. Possible values:
            NHC : Healthy Home Coach
        dashboard_data:
          $ref: '#/components/schemas/NADashboardData'
        data_type:
          type: array
          items:
            type: string
        co2_calibrating:
          type: boolean
        date_setup:
          type: integer
          format: int32
        last_setup:
          type: integer
          format: int32
        firmware:
          type: integer
          format: int32
        last_upgrade:
          type: integer
          format: int32
        wifi_status:
          type: integer
          format: int32
          description: |
            Current wifi status. The different thresholds to take into account are
            RSSI_THRESHOLD_0 = 86 bad signal
            RSSI_THRESHOLD_1 = 71 average signal
            RSSI_THRESHOLD_2 = 56 good signal
        name:
          type: string
    NASecurityDataResponse:
      properties:
        status:
          type: string
          example: ok
        body:
          $ref: '#/components/schemas/NASecurityData'
        time_exec:
          type: number
          format: double
        time_server:
          type: integer
          format: int32
    NASecurityData:
      properties:
        homes:
          type: array
          items:
            $ref: '#/components/schemas/NASecurityHome'
        user:
          $ref: '#/components/schemas/NASecurityUser'
        global_info:
          $ref: '#/components/schemas/NASecurityGlobalInfo'