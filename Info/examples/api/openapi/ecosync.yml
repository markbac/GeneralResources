openapi: 3.0.0
info:
  version: 1.3.1
  title: EcoSync API
  description: |
    <h3>Welcome to the EcoSync swagger on-line documentation!</h3>
    
    For authentication details, hit the Authorize button! or see $ref: '#/securitySchemes/bearerAut'
    
  contact:
    name: EcoSync
    email: contact@ecosync.energy
tags:
  - name: history
    description: Historical data methods
  - name: developers
    description: Operations available to regular developers
paths:
  /history:
    post:
      tags:
        - developers
        - history
      summary: retrieves room history
      operationId: getHeatingHistory
      description: >
        (dev server /getHeatingHistory )


        This endpoint permits to get the heating history data associated to a
        room between the specified time. If start time and end time are not
        specified, the endpoint returns the history data measured in the last
        week. The endpoint returns the heating power request, set temperature
        and temperature related to the timestamp.


        Request URL in development environment:
        https://us-central1-ecosync-portal-dev.cloudfunctions.net/getHeatingHistory


        in PROD: https://api.ecosync.energy/history (previously:
        https://us-central1-ecosync-dev.cloudfunctions.net/getHeatingHistory)
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/building_room_with_date'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room_histories'
        '400':
          description: bad input parameter
  /events:
    post:
      tags:
        - developers
        - history
      summary: retrieves room event history
      operationId: getEventHistory
      description: >
        (dev server /getEventHistory )


        This endpoint permits to get the event history data associated to a
        room between the specified time. If start time and end time are not
        specified, the endpoint returns the event history data logged in the last
        week. The endpoint returns the user, type of event and additional info related to the timestamp.


        Request URL in development environment:
        https://us-central1-ecosync-portal-dev.cloudfunctions.net/getEventHistory


        in PROD: https://api.ecosync.energy/history (previously:
        https://us-central1-ecosync-dev.cloudfunctions.net/getEventHistory)
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/building_room_with_date'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room_events'
        '400':
          description: bad input parameter          
  /getEnergySaving:
    post:
      description: 'Get the energy saving of a room or a set of rooms within a building.

        If start time and end time are not specified, returns the energy savings measured
        over the last full calendar day (i.e. most recent midnight to the midnight
        before that). The energy saving is measured as the difference between the
        measured energy consumption of this room and the predicted energy consumption
        of a model room. The energy saving can be negative, indicating that a room
        used more than predicted. The energy saving is presented in a few units, including
        J, kWh and kg of CO2. We also calculate a percentage saving which shows the
        saved energy as a fraction of the total saving.

        If given only a building_id, this will return a JSON object keyed by room_ids
        with savings as values.

        The endpoint will cache the calculated energy saving in 24-hour chunks in
        the Firebase DB for quicker responses.'
      parameters:
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/SavingSchema'
        in: query
        name: SavingSchema
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleSavingSchema'
          description: The energy saved in this room in J, kWh and kg CO2.
        '400':
          description: Bad input parameter
        '401':
          description: CORS or internal error
      tags:
      - developers
      - history
  /updateEnergySavingDB:
    post:
      description: Triggered by internal CRON job to call getEnergySaving for rooms
        every 24 hours.
      responses:
        '200':
          description: Successful DB update
      tags:
      - developers
  /getForecastSaving:
    get:
      description: The forecast energy saving takes data from a recent pilot and predicts
        energy savings over an entire year. It takes into account the actual heating
        data and builds a model of the room's energy usage, then compares the two.
      parameters:
      - content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForecastSchema'
        in: query
        name: SavingSchema
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForecastResponseSchema'
          description: The forecast energy consumption, saving and baseline.
          
  /buildings:
    post:
      tags:
        - developers
      summary: same as get
      description: same as get
      responses:
        '200':
          description: ''
    get:
      tags:
        - developers
      summary: retrieves all buildings
      operationId: getBuildings
      description: >
        (dev server /getBuildings )

        This endpoint permits to get the list of building IDs grouped by their site IDs.
        
        Request URL in development environment: https://us-central1-ecosync-portal-dev.cloudfunctions.net/getBuildings
        
        in PROD: https://api.ecosync.energy/buildings (previously: https://us-central1-ecosync-dev.cloudfunctions.net/getBuildings)
      security:
        - bearerAuth: [testauthcode]
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/buildings'
        '400':
          description: bad input parameter
  /building:
    post:
      tags:
        - developers
      summary: retrieves building info
      operationId: getBuilding
      description: >
       (dev server /getBuilding )

        This endpoint permits to get the list of building IDs grouped by their site IDs.
        
        Request URL in development environment: https://us-central1-ecosync-portal-dev.cloudfunctions.net/getBuilding
        
        in PROD: https://api.ecosync.energy/building (previously: https://us-central1-ecosync-dev.cloudfunctions.net/getBuilding)
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/building'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/building_data'
        '400':
          description: bad input parameter
  /buildingtopology:
    post:
      tags:
        - developers
      summary: retrieves site topology
      operationId: getBuildingTopology
      description: >
       (dev server /getBuildingTopology )

        This endpoint permits to get the list of topology items of a certain site. May include floors, clusters, tenants etc.
        
        Request URL in development environment: https://us-central1-ecosync-portal-dev.cloudfunctions.net/getBuildingTopology
        
        in PROD: https://api.ecosync.energy/buildingtopology (previously: https://us-central1-ecosync-dev.cloudfunctions.net/getBuildingTopology)
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/site'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site_topology_data'
        '400':
          description: bad input parameter
  /rooms:
    post:
      tags:
        - developers
      summary: Gets room IDs of building
      description: >
        This endpoint permits to get the list of building IDs grouped by their site IDs.

        Request URL in development environment: https://us-central1-ecosync-portal-dev.cloudfunctions.net/getRooms
        
        in PROD: https://api.ecosync.energy/rooms (previously: https://us-central1-ecosync-dev.cloudfunctions.net/getRooms)
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/building'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room_ids'
        '400':
          description: bad input parameter
  /room:
    post: 
      tags:
        - developers
      summary: Gets room IDs of building
      description: >
        (dev server /getRoom)

        This endpoint permits to get the current state of a given room.
        
        Request URL in development environment: https://us-central1-ecosync-portal-dev.cloudfunctions.net/getRoom
        
        in PROD: https://api.ecosync.energy/room (previously: https://us-central1-ecosync-dev.cloudfunctions.net/getRoom)
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              type: object
              properties:
                roomId:
                  $ref: '#/components/schemas/room_id'
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/room_data'
        '400':
          description: bad input parameter
  /roomsetuptime:
    post:
      tags:
        - developers
        - history
      summary: Gets room first measurement
      description: > 
        This endpoint retrieves the first timestamp of a room.

        Request URL in development environment: https://us-central1-ecosync-portal-dev.cloudfunctions.net/getStartTime
        
        in PROD: https://api.ecosync.energy/roomsetuptime
      security:
        - bearerAuth: [testauthcode]
      requestBody:
        content:
          text/plain:
            schema:
              type: object
              properties:
                buildingId:
                  $ref: '#/components/schemas/building_id'
                roomId:
                  $ref: '#/components/schemas/room_id'
      responses:
        '200':
          description: search results matching criteria
          content:
            integer:
              schema:
                type: integer
                format: unix-timestamp
                example: 1625470293
        '400':
          description: bad input parameter                  
servers:
  - url: https://api.ecosync.energy/
  - url: https://us-central1-ecosync-portal-dev.cloudfunctions.net/
components:
  schemas:
    room_data:
      type: object
      properties:
        name: 
          type: string
          example: "Study at Exeter MCR"
        reachable: 
          type: boolean
          example: false
        therm_setpoint_start_time: 
          type: integer
          format: unix-timestamp
          example: 1625470293
          description: same timestamp that you get by calling /roomsetuptime endpoint
        therm_setpoint_temperature: 
          type: integer
          example: 20
        therm_measured_temperature: 
          type: integer
          example: 21
    room_ids:
      type: array
      items:
        $ref: '#/components/schemas/room_id'
    room_id:
      type: string
      example: "110087996"
    room_histories:
      type: object
      #indexed with roomId
      additionalProperties:
        $ref: '#/components/schemas/room_history'
    room_history:
      type: object
      properties:
        heating_power_request:
          type: integer
          format: percent
          example: 0
        set_temperature:
          type: integer
          example: 15
        temperature:
          type: integer
          example: 19.2
    room_events:
      type: object
      properties:
        created_at:  
          type: string
          format: unix-timestamp
          example: 1645687954
        created_by: 
          type: string
          example: "zsuzsa@ecosync.energy|Anonymous User|EcoSync System"
        homeId: 
          type: string
          example: "micropelt_demo_kennington"
        roomId: 
          $ref: '#/components/schemas/room_id'
        live: 
          type: boolean
          example: true
        text: 
          type: string
          example: "[[{\"temp\":21},{\"temp\":19}],[{\"temp\":21.5},{\"temp\":19}]]"
          description: Different types require different content. This examle is from comfort/away to comfort/away settings
        type: 
          $ref: '#/components/schemas/event_types'
    event_types:
      type: integer
      enum: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116]
      description: >
        Types:
          * OFFLINE_NETATMO_BATTERY_DEAD = 1;
          * OFFLINE_NETATMO_TRV = 2;
          * OFFLINE_NETATMO_BATTERY_LOW = 3;
          * OFFLINE_NETATMO_RELAY = 4;
          * FIRE = 5;
          * OPEN_WINDOW = 6;
          * NO_HEATING = 7;
          * NO_HEATING_CONTROL = 9;
          * STUCK_PIN = 10;
          * OFFLINE_TRV = 11;
          * OFFLINE_GW = 12;
          * MECHANICAL_ERROR = 13;
          * CELLULAR_GW = 14;
          * EXTRA_HEAT_SOURCE = 15;
          * REFERENCE_RUN = 16;
          * USER_ACTION_SET_TEMP = 100;
          * USER_ACTION_SET_FREEZE_ON = 101;
          * USER_ACTION_SET_FREEZE_OFF = 102;
          * USER_ACTION_ADMIN_SET_TEMP = 103;
          * USER_ACTION_ADMIN_SET_CUSTOM_TEMP = 104;
          * USER_ACTION_ADMIN_SET_CUSTOM_TEMP_OFF = 105;
          * USER_ACTION_ADMIN_SET_TEMP_BULK = 106;
          * USER_ACTION_ADMIN_SET_FREEZE_ON = 107;
          * USER_ACTION_ADMIN_SET_FREEZE_ON_BULK = 108;
          * USER_ACTION_ADMIN_SET_FREEZE_OFF = 109;
          * USER_ACTION_ADMIN_SET_FREEZE_OFF_BULK = 110;
          * USER_ACTION_ADMIN_SET_OPEN_WINDOW_DETECTION_ON = 111;
          * USER_ACTION_ADMIN_SET_OPEN_WINDOW_DETECTION_ON_BULK = 112;
          * USER_ACTION_ADMIN_SET_OPEN_WINDOW_DETECTION_OFF = 113;
          * USER_ACTION_ADMIN_SET_OPEN_WINDOW_DETECTION_OFF_BULK = 114;
          * USER_ACTION_SLACK_SET_TEMP = 115;
    buildings:
      type: object
      #indexed by sight/site IDs
      additionalProperties:
        $ref: '#/components/schemas/building'
    building:
      type: object
      required:
        - buildingId
      properties:
        buildingId:
          $ref: '#/components/schemas/building_id'
    building_data:
      type: object
      properties:
        name: 
          type: string
          example: MCR
        country: 
          type: string
          example: GB
        altitude: 
          type: number
          format: float
          example: 71.2
        coordinates: 
          type: array
          items:
            type: number
            format: float
            example: -1.256175799999937
          minItems: 2
          maxItems: 2
        timezone: 
          example: "Europe/London"
    building_id:
      type: string
      format: varchar(255)
      example: 5a8c99cd902a4033218b7d1e
    building_room_with_date:
      type: object
      required:
        - buildingId
        - roomId
      properties:
        buildingID:
          $ref: '#/components/schemas/building_id'
        roomId:
          $ref: '#/components/schemas/room_id'
        startAt:
          type: string
          format: unix-timestamp
          example: '1606117044'
          description: >
            Unix Timestamp. Required if endAt is given, otherwise optional.
            Default\: last measured time.
        endAt:
          type: string
          format: unix-timestamp
          example: '1606117344'
          description: >
            Unix Timestamp. Required if startAt is given, otherwise optional.
            Default\: last measured - 1 week.
    site:
      type: object
      required:
        - siteId
      properties:
        siteId:
          $ref: '#/components/schemas/site_id'
    site_id:
      type: string
      format: varchar(255)
      example: 15
    site_topology_data:
      type: object
      properties:
        floors: 
          type: array
          items:
            type: object
            properties:
              floorplan: 
               type: string
               example: "https://firebasestorage.googleapis.com/v0/b/ecosync-sensor-data-vs.appspot.com/o/floorPlans%2F092341d9-d5c1-48cc-9ae0-f56423a0e481?alt=media&token=d543864d-51bc-423a-8a19-0c361afe4836"
              name:
               type: string
               example: "Frist floor"
              rooms:
               type: array
               items: 
                $ref: '#/components/schemas/room_id'
              sort:
               type: integer
               example: 1
        clusters:
          type: object
          properties:
           name:
            type: string
            example: "610-640"
           rooms:
            type: array
            items:
             $ref: '#/components/schemas/room_id'
    ForecastResponseSchema:
      properties:
        forecast_actual:
          description: The forecast annual actual usage with Ecosync of this building
            in kWh.This is calculated by using a machine learning model to simulate
            how much energy thisbuilding would use Ecosync technology over a year.
          type: number
        forecast_baseline:
          description: The forecast annual baseline usage of this building in kWh.This
            is calculated by using a machine learning model to simulate how much energy
            thisbuilding would use without Ecosync technology.
          type: number
        forecast_saving:
          description: The forecast annual saving due to Ecosync of this building
            in kWh.
          type: number
        forecast_saving_co2:
          description: The forecast annual saving due to Ecosync of this building
            in kg CO2.
          type: number
        pilot_actual:
          description: The actual usage of this building during the pilot in kWh measured
            from individual radiators..
          type: number
        pilot_baseline:
          description: The baseline usage of this building during the pilot in kWh.
          type: number
        pilot_days:
          description: The number of days during the pilot.
          type: integer
        pilot_saving:
          description: The saving due to EcoSync of this building during the pilot
            in kWh.
          type: number
        pilot_saving_co2:
          description: The saving due to EcoSync of this building during the pilot
            in kg of CO2.
          type: number
        saving_fraction:
          description: The fractional saving of this building over the pilot. A value
            of 1 is 100%.
          type: number
      required:
      - forecast_actual
      - forecast_baseline
      - forecast_saving
      - forecast_saving_co2
      - pilot_actual
      - pilot_baseline
      - pilot_days
      - pilot_saving
      - pilot_saving_co2
      - saving_fraction
      type: object
    ForecastSchema:
      properties:
        building_id:
          description: The ID of the building to retrieve data for.
          example: micropelt_besse_Gen2
          type: string
        end_ts:
          description: The last timestamp to calculate data for. Defaults to now,
            and must be after start_ts.This must be a valid Unix timestamp as an integer.
          example: 1646305975
          maximum: 2524608000
          minimum: 1451606400
          type: integer
        method:
          default: GET
          description: Internal field for CORS handling. Not passed to backend.
          type: string
        start_ts:
          description: The first timestamp to calculate data for. Defaults to two
            weeks before now.This must be a valid Unix timestamp as an integer.
          example: 1646219575
          maximum: 2524608000
          minimum: 1451606400
          type: integer
      required:
      - building_id
      type: object
    SavingSchema:
      properties:
        building_id:
          description: The ID of the building to retrieve data for.
          example: micropelt_besse_gen2
          type: string
        end_ts:
          description: The last timestamp to calculate data for. Defaults to now,
            and must be after start_ts.This must be a valid Unix timestamp as an integer.
          example: 1646305975
          maximum: 2524608000
          minimum: 1451606400
          type: integer
        method:
          default: GET
          description: Internal field for CORS handling. Not passed to backend.
          type: string
        room_id:
          default: ''
          description: The ID of the room within the building to retrieve data for.
            If this is empty, returns results for the whole building.
          example: micropeltbessegen2jcrcomputerroom
          type: string
        start_ts:
          description: The first timestamp to calculate data for. Defaults to one
            day before now.This must be a valid Unix timestamp as an integer.
          example: 1646219575
          maximum: 2524608000
          minimum: 1451606400
          type: integer
      required:
      - building_id
      type: object
    SingleSavingSchema:
      properties:
        saving:
          description: The saving in Joules from this room.
          example: 36000000.0
          type: number
        savingCO2:
          description: The saving in kg of CO2 from this room.
          example: 2.331
          type: number
        savingkWh:
          description: The saving in kWh from this room.
          example: 10.0
          type: number
        savingpct:
          description: The percentage saving of this room.
          example: 0.5
          type: number
      required:
      - saving
      - savingCO2
      - savingkWh
      - savingpct
      type: object
      
  securitySchemes:
    bearerAuth:
      type: http
      scheme: Bearer
      description: >
        <h2>Setting up authentication</h2>
        The endpoint can only be accessed by Firebase Users (Firebase->Authentication - Add user, with existing email address). The request need to be authorized by providing an Authorization HTTP header with value Bearer <Firebase ID Token>. The Firebase ID token needs to be passed as a Bearer token in the Authorization HTTP header like this: Authorization: Bearer <Firebase ID Token>
        
        To get your ID Token, go to
        
        <ul><li>for <a href="https://console.cloud.google.com/apis/credentials?folder=&organizationId=&project=ecosync-dev" target="_blank">EcoSync Portal project</a> or</li>
        <li>for <a href="https://console.cloud.google.com/apis/credentials?folder=&organizationId=&project=ecosync-portal-dev" target="_blank">EcoSync Portal DEV project</a></li></ul>
        
        and create an api key. (Browser key with no restrictions.)
        <h2>Authentication</h2>
    
        Create a POST request with the following URL https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key={FIREBASE_API_KEY}.
        
        In the Body, pass the following:
        
        <pre>
        {
            "email": "<email>",
            "password": "<password>",
            "returnSecureToken": true
        }
        </pre>
        
        The response contains an idToken what you need for heating history API request as the Bearer Token.
security:
  - bearerAuth: [testauthcode]